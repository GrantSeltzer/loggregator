// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package grpcconnector_test

import (
	"doppler/dopplerservice"
	"plumbing"
	"time"
	"trafficcontroller/grpcconnector"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

type mockFinder struct {
	NextCalled chan bool
	NextOutput struct {
		Ret0 chan dopplerservice.Event
	}
}

func newMockFinder() *mockFinder {
	m := &mockFinder{}
	m.NextCalled = make(chan bool, 100)
	m.NextOutput.Ret0 = make(chan dopplerservice.Event, 100)
	return m
}
func (m *mockFinder) Next() dopplerservice.Event {
	m.NextCalled <- true
	return <-m.NextOutput.Ret0
}

type mockReceiveFetcher struct {
	FetchStreamCalled chan bool
	FetchStreamInput  struct {
		Ctx  chan context.Context
		In   chan *plumbing.StreamRequest
		Opts chan []grpc.CallOption
	}
	FetchStreamOutput struct {
		Ret0 chan []grpcconnector.Receiver
		Ret1 chan error
	}
	FetchFirehoseCalled chan bool
	FetchFirehoseInput  struct {
		Ctx  chan context.Context
		In   chan *plumbing.FirehoseRequest
		Opts chan []grpc.CallOption
	}
	FetchFirehoseOutput struct {
		Ret0 chan []grpcconnector.Receiver
		Ret1 chan error
	}
}

func newMockReceiveFetcher() *mockReceiveFetcher {
	m := &mockReceiveFetcher{}
	m.FetchStreamCalled = make(chan bool, 100)
	m.FetchStreamInput.Ctx = make(chan context.Context, 100)
	m.FetchStreamInput.In = make(chan *plumbing.StreamRequest, 100)
	m.FetchStreamInput.Opts = make(chan []grpc.CallOption, 100)
	m.FetchStreamOutput.Ret0 = make(chan []grpcconnector.Receiver, 100)
	m.FetchStreamOutput.Ret1 = make(chan error, 100)
	m.FetchFirehoseCalled = make(chan bool, 100)
	m.FetchFirehoseInput.Ctx = make(chan context.Context, 100)
	m.FetchFirehoseInput.In = make(chan *plumbing.FirehoseRequest, 100)
	m.FetchFirehoseInput.Opts = make(chan []grpc.CallOption, 100)
	m.FetchFirehoseOutput.Ret0 = make(chan []grpcconnector.Receiver, 100)
	m.FetchFirehoseOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockReceiveFetcher) FetchStream(ctx context.Context, in *plumbing.StreamRequest, opts ...grpc.CallOption) ([]grpcconnector.Receiver, error) {
	m.FetchStreamCalled <- true
	m.FetchStreamInput.Ctx <- ctx
	m.FetchStreamInput.In <- in
	m.FetchStreamInput.Opts <- opts
	return <-m.FetchStreamOutput.Ret0, <-m.FetchStreamOutput.Ret1
}
func (m *mockReceiveFetcher) FetchFirehose(ctx context.Context, in *plumbing.FirehoseRequest, opts ...grpc.CallOption) ([]grpcconnector.Receiver, error) {
	m.FetchFirehoseCalled <- true
	m.FetchFirehoseInput.Ctx <- ctx
	m.FetchFirehoseInput.In <- in
	m.FetchFirehoseInput.Opts <- opts
	return <-m.FetchFirehoseOutput.Ret0, <-m.FetchFirehoseOutput.Ret1
}

type mockReceiver struct {
	RecvCalled chan bool
	RecvOutput struct {
		Ret0 chan *plumbing.Response
		Ret1 chan error
	}
}

func newMockReceiver() *mockReceiver {
	m := &mockReceiver{}
	m.RecvCalled = make(chan bool, 100)
	m.RecvOutput.Ret0 = make(chan *plumbing.Response, 100)
	m.RecvOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockReceiver) Recv() (*plumbing.Response, error) {
	m.RecvCalled <- true
	return <-m.RecvOutput.Ret0, <-m.RecvOutput.Ret1
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
